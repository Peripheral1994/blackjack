// Generated by CoffeeScript 1.9.3
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

window.App = (function(superClass) {
  extend(App, superClass);

  function App() {
    return App.__super__.constructor.apply(this, arguments);
  }

  App.prototype.initialize = function() {
    var deck;
    this.set('deck', deck = new Deck());
    return this.dealHands();
  };

  App.prototype.endGame = function() {
    var dHand, pHand;
    dHand = this.get('dealerHand').maxScore();
    pHand = this.get('playerHand').maxScore();
    if (dHand > pHand) {
      $('body').css({
        'background-color': 'red'
      });
    }
    if (dHand < pHand) {
      $('body').css({
        'background-color': 'lightgreen'
      });
    }
    if (dHand === pHand) {
      return $('body').css({
        'background-color': 'yellow'
      });
    }
  };

  App.prototype.newGame = function() {
    var deck;
    $('body').css({
      'background-color': 'white'
    });
    if (this.get('deck').length > 15) {
      return this.dealHands();
    } else {
      alert('Deck is too small, shuffling!');
      this.set('deck', deck = new Deck());
      return this.dealHands();
    }
  };

  App.prototype.dealHands = function() {
    this.set('playerHand', this.get('deck').dealPlayer());
    this.set('dealerHand', this.get('deck').dealDealer());
    this.get('dealerHand').on('endGame', this.endGame, this);
    return this.get('playerHand').on('newGame', this.newGame, this);
  };

  return App;

})(Backbone.Model);
